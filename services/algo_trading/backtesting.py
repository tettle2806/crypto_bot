import pandas as pd

from services.algo_trading.get_prices import get_historical_prices
from services.algo_trading.strategies.bolinger_bands_breakpoints import data
from services.algo_trading.strategies.bollinger_bands import bollinger_bands_strategy


def backtest_strategy(data, initial_balance=1000, trading_size=0.1, stop_loss=0.1, take_profit=0.3):
    balance = initial_balance
    position = 0
    entry_price = 0
    entry_index = None  # –ò–Ω–¥–µ–∫—Å, –∫–æ–≥–¥–∞ –∑–∞—à–ª–∏ –≤ —Å–¥–µ–ª–∫—É

    for index, row in data.iterrows():
        if row['Signal'] == "BUY" and balance > 0:
            position = (balance * trading_size) / row['close']
            entry_price = row['close']
            balance -= position * entry_price
            entry_index = index
            print(f"üìà –ü–æ–∫—É–ø–∫–∞: {row['timestamp']} –¶–µ–Ω–∞: {row['close']} ADX: {row['ADX']}")

        elif row['Signal'] == "SELL" and position > 0:
            max_hold_bars = 50  # –ú–∞–∫—Å–∏–º—É–º 50 —Å–≤–µ—á–µ–π (–º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å)

            if position > 0 and (index - entry_index) >= max_hold_bars:
                print(f"‚è≥ –í—ã—à–ª–∏ –∏–∑ —Å–¥–µ–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {row['timestamp']} –¶–µ–Ω–∞: {row['close']}")
                balance += position * row['close']
                position = 0
            change = (row['close'] - entry_price) / entry_price
            if change <= -stop_loss:
                print(f"STOP LOSS TRIGGERED (-{stop_loss * 100}%)")
            elif change >= take_profit:
                print(f"TAKE PROFIT TRIGGERED (+{take_profit * 100}%)")

            balance += position * row['close']
            print(f"üìâ –ü—Ä–æ–¥–∞–∂–∞: {row['timestamp']} –¶–µ–Ω–∞: {row['close']} ADX: {row['ADX']}")
            position = 0

    if position > 0:
        balance += position * data.iloc[-1]['close']

    print("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {len(data[data['Signal'] == 'BUY'])}")
    print(f"üìâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂: {len(data[data['Signal'] == 'SELL'])}")
    print(f"‚ö†Ô∏è –°–¥–µ–ª–∫–∏ –ø–æ —Å—Ç–æ–ø-–ª–æ—Å—Å—É: {len(data[data['close'] <= entry_price * (1 - stop_loss)])}")
    print(f"üéØ –°–¥–µ–ª–∫–∏ –ø–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—É: {len(data[data['close'] >= entry_price * (1 + take_profit)])}")

    print("\nüîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:")
    print(data[['timestamp', 'close', 'Signal']].tail(20))
    return balance





def backtest_bollinger(prices, initial_balance=1000, trading_size=0.1):
    df = pd.DataFrame(prices, columns=["price"])

    balance = initial_balance
    position = 0
    entry_price = 0
    buys = 0
    sells = 0

    for i in range(len(df)):
        signal = bollinger_bands_strategy(prices[: i + 1])  # –°—á–∏—Ç–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞

        if signal == "BUY" and balance > 0:
            position = (balance * trading_size) / df["price"].iloc[i]
            entry_price = df["price"].iloc[i]
            balance -= position * entry_price
            buys += 1
            print(f"üìà –ü–æ–∫—É–ø–∫–∞: –¶–µ–Ω–∞ {entry_price}")

        elif signal == "SELL" and position > 0:
            balance += position * df["price"].iloc[i]
            position = 0
            sells += 1
            print(f"üìâ –ü—Ä–æ–¥–∞–∂–∞: –¶–µ–Ω–∞ {df['price'].iloc[i]}")

    if position > 0:
        balance += position * df["price"].iloc[-1]

    print("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT")
    print(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {buys}")
    print(f"üìâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂: {sells}")

    return balance


# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
print(backtest_bollinger(get_historical_prices()))

import asyncio
import json
import websockets
import requests

# –ü–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
SYMBOL = "btcusdt"
DEPTH_URL = f"wss://stream.binance.com:9443/ws/{SYMBOL}@depth"
TELEGRAM_BOT_TOKEN = "your_telegram_bot_token"
TELEGRAM_CHAT_ID = "your_chat_id"

# –ü–æ—Ä–æ–≥ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–π—Å–±–µ—Ä–≥-–∑–∞—è–≤–æ–∫
ICEBERG_THRESHOLD = 5

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–æ–≤ –∑–∞—è–≤–æ–∫
order_book = {}

async def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
    requests.post(url, json=payload)

async def detect_iceberg(level, new_volume):
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ """
    old_volume = order_book.get(level, 0)
    change = abs(new_volume - old_volume)
    if change >= ICEBERG_THRESHOLD:
        await send_telegram_message(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–π—Å–±–µ—Ä–≥-–∑–∞—è–≤–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ {level}: –æ–±—ä–µ–º {new_volume}")
    order_book[level] = new_volume

async def process_depth_update(data):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–∫–∞–Ω–∞ """
    for bid in data.get("b", []):  # –ü–æ–∫—É–ø–∫–∏ (bid)
        price, volume = float(bid[0]), float(bid[1])
        await detect_iceberg(price, volume)
    for ask in data.get("a", []):  # –ü—Ä–æ–¥–∞–∂–∏ (ask)
        price, volume = float(ask[0]), float(ask[1])
        await detect_iceberg(price, volume)

async def listen_to_depth():
    """ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket Binance """
    async with websockets.connect(DEPTH_URL) as ws:
        while True:
            response = await ws.recv()
            data = json.loads(response)
            await process_depth_update(data)

if __name__ == "__main__":
    asyncio.run(listen_to_depth())
